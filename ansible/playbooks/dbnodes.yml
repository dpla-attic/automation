---

# To run standalone, specify
# --extra-vars "level=<development|staging|production>"
# ... or see one of the convenience playbooks that includes this one with the
#     correct value.

- name: Gather inventory facts in case playbook is run standalone
  hosts: all

- name: Database nodes
  hosts: dbnodes
  serial: 1
  become: yes
  roles:
    - dbnode
  pre_tasks:
    - name: Gather ec2 facts
      ec2_facts:
      when: level == 'production' or level == 'staging'
      tags:
        - database
        - packages
    - name: De-register instance from loadbalancer
      local_action: ec2_elb
      when: level == 'production' or level == 'staging'
      become: false
      args:
        instance_id: "{{ ansible_ec2_instance_id }}"
        ec2_elbs: "{{ bigcouch_elb_name }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        aws_region: "{{ aws_region }}"
        state: absent
      tags:
        - database
        - packages
    - name: Wait for connections to drain
      when: level == 'production' or level == 'staging'
      wait_for: >-
          host="{{ inventory_hostname }}" port="5984" state=drained timeout=60
      ignore_errors: yes
  post_tasks:
    - name: Register instance with loadbalancer again
      local_action: ec2_elb
      when: level == 'production' or level == 'staging'
      become: false
      args:
        instance_id: "{{ ansible_ec2_instance_id }}"
        ec2_elbs: "{{ bigcouch_elb_name }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        aws_region: "{{ aws_region }}"
        state: present
      tags:
        - database
        - packages
