---

# To run standalone, specify
# --extra-vars "level=<development|staging|production>"
# ... or see one of the convenience playbooks that includes this one with the
#     correct value.

- name: Gather inventory facts in case playbook is run standalone
  hosts: all


- name: Site proxies
  hosts:
    - site_proxies
  become: yes
  serial: 1
  roles:
    - {role: site_proxy, tags: ['site_proxy']}
  pre_tasks:
    - name: Gather ec2 facts
      ec2_facts:
      when: level == 'production' or level == 'staging'
    - name: De-register instance from loadbalancer
      local_action: ec2_elb
      when: level == 'production' or level == 'staging'
      become: false
      args:
        instance_id: "{{ ansible_ec2_instance_id }}"
        ec2_elbs: "{{ siteproxy_elb_name }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        aws_region: "{{ aws_region }}"
        state: absent
    - name: Wait for connections to drain
      wait_for: >-
          host="{{ inventory_hostname }}" port="80" state=drained timeout=60
      ignore_errors: yes
  post_tasks:
    - name: Wait for site proxy node to come back up
      become: false
      local_action: >
          wait_for host="{{ inventory_hostname }}" port={{ siteproxy_port }}
          delay=2 timeout=30
    - name: Register instance with loadbalancer again
      # Note that, on initialization of the whole environment, when there are no
      # origin servers yet behind the loadbalancer, this task could fail if the loadbalancer
      # is configured with a health check that fails a 502 (Bad Gateway) response.  You
      # can get around this by having the loadbalancer simply probe for port 80 while you're
      # initializing everything, and then switch it later to a HTTP check for "/".
      local_action: ec2_elb
      when: level == 'production' or level == 'staging'
      become: false
      args:
        instance_id: "{{ ansible_ec2_instance_id }}"
        ec2_elbs: "{{ siteproxy_elb_name }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        aws_region: "{{ aws_region }}"
        state: present
        wait_timeout: 22

