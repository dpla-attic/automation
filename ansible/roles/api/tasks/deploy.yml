---

# Clear these out prior to copying and symlinking below

- name: Clear /home/dpla/api symlink
  file: path=/home/dpla/api state=absent

- name: Make sure that API build directories are clear
  when: clean_api | default(false)
  file:
    path: "/home/dpla/{{ item }}"
    state: absent
  with_items:
    - api-git
    - api-local

- name: Check out api (platform) app from its repository (git)
  git: >-
      repo="{{ api_repo }}"
      dest=/home/dpla/api-git
      version={{ api_branch_or_tag | default("master") }}
      force=true
  become_user: dpla
  when: not api_use_local_source

# Symlink to the build directory, to allow local and git builds to coexist neatly
# 1. Git deployment ...
- file: src=/home/dpla/api-git dest=/home/dpla/api state=link
  when: not api_use_local_source

- name: Check out api (platform) app from mounted directory (local)
  script: copy_local_app.sh
  when: api_use_local_source

# Symlink, as above
# 2. Local filesystem deployment ...
- file: src=/home/dpla/api-local dest=/home/dpla/api state=link
  when: api_use_local_source

- name: Update api app database configuration
  template: >
      src=database.yml.j2 dest=/home/dpla/api/config/database.yml
      owner=dpla group=webapp mode=0640
  when: not api_use_local_source

- name: Update api app settings in v1
  template: >
      src=dpla.yml.j2 dest=/home/dpla/api/v1/config/dpla.yml
      owner=dpla group=webapp mode=0640
  when: not api_use_local_source

- name: Update api unicorn.rb
  template: >
      src=unicorn.rb.j2 dest=/home/dpla/api/config/unicorn.rb
      owner=dpla group=dpla mode=0644

- name: Make sure rbenv and bundler are current
  script: >
      ../../../files/install_ruby_tools.sh {{ api_rbenv_version }}
  become_user: dpla

- name: Ensure existence of live app directory
  file: path=/srv/www/api state=directory owner=dpla group=dpla mode=0755

- name: Stop Unicorn (gracefully)
  # Unicorn is stopped completely, and later restarted, because we assume that
  # preload_app is true, and this option means that a SIGHUP to reload Unicorn's
  # configuration won't cause it to reload program code.  In a setting other than
  # development, the loadbalancer in front of the API node will be routing requests
  # to the other servers in the same pool.
  service: name=unicorn_api state=stopped

- name: Assert that Unicorn pid and socket files are absent
  # These could have been left behind by an earlier failure or termination
  file: >-
    path="/srv/www/api/tmp/unicorn_api.{{ item }}" state=absent
  with_items:
    - pid
    - sock

- name: Build api app
  script: >
      build_api.sh {{ api_rbenv_version }}
  become_user: dpla
  notify:
    - restart memcached

- name: Start Unicorn
  service: name=unicorn_api state=started
