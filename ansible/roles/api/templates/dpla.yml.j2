repository:

  ####################
  # * If you are just running CouchDB with no BigCouch cluster *
  # cluster_host: not needed at all
  # node_host: your couchdb server and its default port (or whatever port
  # your couchdb is running on.)
  ####################
  # node_host: 127.0.0.1:5984

  ####################
  # * If you are running a BigCouch cluster *
  # cluster_host: your bigcouch cluster host, most likely with the default
  # couchdb post number 5984.
  # node_host: your couchdb hosts inside the cluster BUT not on the the default
  # couchdb port. By default,  # BigCouch will have that couchdb instances listening 
  # on port 5986. It really does not matter which one because BigCouch will replicate
  # the small admin changes we make on that one host anyways.
  ####################
  cluster_host: {{ bigcouch_cluster_loadbal }}:5984
  node_host: {{ bigcouch_cluster_loadbal }}:5986

  # admin must be a server-admin (in CouchDB parlance) as configured in your
  # CouchDB or BigCouch config file
  admin:
    user: {{ bigcouch_admin_name }}
    pass: {{ bigcouch_admin_password }}

  # reader will be a database member (in CouchDB parlance) that can be created
  # with (with only read permissions) by a rake task. 
  reader:
    user: {{ bigcouch_admin_name }}
    pass: {{ bigcouch_admin_password }}

search:
  # ElasticSearch host and port
  endpoint: {{ es_cluster_loadbal }}

  # Name of the alias pointing to your deployed ElasticSearch index
  index_name: {{ api_index_name }}

  # Name of your live river that points to your $index_name
  river_name: dpla_river
  
  # Log level for search queries logged by Tire gem
{% if webapp_debug %}
  log_level: debug
{% else %}
  log_level: notice
{% endif %}
  
api_auth:
  # You're probably going to want to run with the following options commented out.
  # By default, the API requires a valid API key, which is definitely the way you'll
  # want to run it unless you have an excellent reason. (API keys help guard against
  # accidental DDOS attacks by wonky client apps.)

  # Set to true to accept *any* api_key param value as long as it is not blank
  allow_all_keys: false

  # Set to true to *not* require an api_key param at all. This overrides allow_all_keys and
  # makes the API completely open. This is not recommended for actual production use.
{% if ingestion2 is defined or api_skip_auth %}
  skip_key_auth_completely: true
{% else %}
  skip_key_auth_completely: false
{% endif %}

# Defaults to cache_results: false (which actually uses null_store behind the scenes)
# Supported values for 'cache_results': true, false
# Supported values for 'store': null_store, file_store, dalli_store
caching:
  cache_results: true
{% if api_dalli_store_cache %}
  store: dalli_store
  memcache_servers:

{% if all_in_one_hosts | default(false) %}
    - {{ hostvars[inventory_hostname][internal_network_interface].ipv4.address }}
{% else %}
{% for h in groups['memcached'] %}
    - {{ hostvars[h][internal_network_interface]['ipv4']['address'] }}
{% endfor %}
{% endif %}

{% else %}
  # file_store directory is tmp/api-cache under the app root
  store: file_store
{% endif %}

field_boosts:
  item:
    sourceResource.title: 2
    sourceResource.description: 0.75
  collection:
    title: 1

api:
  email_from_address: {{ api_key_email_from }}
