---

- name: Clear /home/dpla/frontend symlink
  # It will be recreated below
  file: path=/home/dpla/frontend state=absent

- name: Make sure that frontend build directories are clear
  when: clean_frontend | default(false)
  file:
    path: "/home/dpla/{{ item }}"
    state: absent
  with_items:
    - frontend-git
    - frontend-local

- name: Check out frontend app from its repository
  git: >-
      repo=https://github.com/dpla/frontend.git
      dest=/home/dpla/frontend-git
      version={{ frontend_branch_or_tag }}
      force=true
  become_user: dpla
  when: not frontend_use_local_source

# Symlink to the build directory, to allow local and git builds to coexist neatly
# 1. For a git deployment ...
- file: src=/home/dpla/frontend-git dest=/home/dpla/frontend state=link
  when: not frontend_use_local_source

- name: Check out frontend app from mounted directory
  script: copy_local_app.sh
  when: frontend_use_local_source

# Symlink (see above)
# 2. For a local deployment ...
- file: src=/home/dpla/frontend-local dest=/home/dpla/frontend state=link
  when: frontend_use_local_source

- name: Update frontend app database configuration
  template: >
      src=database.yml.j2 dest=/home/dpla/frontend/config/database.yml
      owner=dpla group=webapp mode=0640
  when: not frontend_use_local_source

- name: Update frontend app settings
  template: >
      src=settings.local.yml.j2 dest=/home/dpla/frontend/config/settings.local.yml
      owner=dpla group=webapp mode=0640
  when: not frontend_use_local_source

- name: Update frontend unicorn.rb
  template: >
      src=unicorn.rb.j2 dest=/home/dpla/frontend/config/unicorn.rb
      owner=dpla group=dpla mode=0644

- name: Add dpla_frontend_assets to Gemfile if branding is turned on
  lineinfile: >
    dest=/home/dpla/frontend/Gemfile
    state=present
    regexp=dpla_frontend_assets
    line="gem 'dpla_frontend_assets', git: 'git@github.com:dpla/frontend-assets.git'"
  when: frontend_include_branding

- name: Make sure rbenv and bundler are current
  script: >
      ../../../files/install_ruby_tools.sh {{ frontend_rbenv_version }}
  become_user: dpla

- name: Ensure existence of live app directory
  file: path=/srv/www/frontend state=directory owner=dpla group=dpla mode=0755

- name: Ensure existence of frontend/tmp directory
  file: path=/srv/www/frontend/tmp state=directory owner=dpla group=dpla mode=0755

# Krazy hijinx ensue to get around having a private GitHub repo for the frontend
# assets gem...

- name: Temporarily copy private key for GitHub
  # This will be used by build_frontend.sh
  copy: >
      src={{ github_private_key_path | default("~/.ssh/id_rsa") }}
      dest=/home/dpla/git_private_key
      owner=dpla group=dpla mode=0600
  when: frontend_include_branding

- name: Stop Unicorn (gracefully)
  # Unicorn is stopped completely, and later restarted, because we assume that
  # preload_app is true, and this option means that a SIGHUP to reload Unicorn's
  # configuration won't cause it to reload program code.  In a setting other than
  # development, the NGINX reverse-proxy in front of Unicorn will be routing requests
  # to the other servers in the same pool.
  service: name=unicorn_frontend state=stopped

- name: Assert that Unicorn pid and socket files are absent
  # These could have been left behind by an earlier failure or termination
  file: >-
    path="/srv/www/frontend/tmp/unicorn_frontend.{{ item }}" state=absent
  with_items:
    - pid
    - sock

- name: Build frontend app
  script: >-
      build_frontend.sh {{ frontend_rbenv_version }}
      {{ 'branding' if frontend_include_branding else '' }}
  become_user: dpla
  notify: restart memcached

- name: Ensure existence of uploads directory
  file: >-
      path=/srv/www/frontend/public/uploads state=directory
      owner=dpla group=dpla mode=0755 recurse=yes

- name: Start Unicorn
  service: name=unicorn_frontend state=started

- name: Remove temporary private key for GitHub
  file: path=/home/dpla/git_private_key state=absent
  when: frontend_include_branding
