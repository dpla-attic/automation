{# siteproxy_self_ssl governs whether this is a demo or sandbox site that has #}
{# no loadbalancer in front of it to handle SSL termination.  We would #}
{# normally run in the development environment with the standalone_loadbalancer #}
{# role configuring an HAProxy loadbalancer with SSL termination, or would #}
{# run in staging or production with another loadbalancer doing SSL. #}
{# siteproxy_self_ssl defaults to false; you're on your own if you change #}
{# that! #}

{% if siteproxy_self_ssl %}
{%     set nginx_port = "443" %}
{%     set listen_opts = "ssl" %}

## SSL
#
ssl_protocols TLSv1.2;
{# dhparam.pem could be created in ansible/files/certificate.sh but it takes #}
{# long enough to calculate that it's not necessary for most #}
{# development environments. #}
# ssl_dhparam /etc/ssl/dhparam.pem;
ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
ssl_prefer_server_ciphers on;
# ssl_stapling and ssl_stapling_verify are not available in nginx 1.1
# ssl_stapling on;
# ssl_stapling_verify on;
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 10m;

{% else %}
{%     set nginx_port = siteproxy_port %}
{%     set listen_opts = "" %}
{% endif %}

# proxy configs
proxy_cache_path  /var/cache/nginx
                  levels=1:2
                  keys_zone=main_cache:{{ siteproxy_nginx_cache_shmem_size }}
                  max_size={{ siteproxy_nginx_cache_max_size }}
                  inactive={{ siteproxy_nginx_cache_inactive_time }};
# TODO with NGINX >=1.7.10: set "use_temp_path=off" option to proxy_cache_path.
# We still have NGINX v1.1.19 in Ubuntu 12.04LTS. Ubuntu 16.04LTS (Xenial)
# provides v1.10.
proxy_temp_path /var/spool/nginx;
proxy_cache_key   "$scheme://$host$request_uri";
proxy_cache       main_cache;
# see proxy_cache_valid directives for successes in location blocks
proxy_cache_valid 404 1h;
proxy_cache_valid 403 1d;
# TODO with NGINX >= 1.5.7: set proxy_cache_revalidate to employ
# If-Modified-Since. See note above about Ubuntu versions.
# proxy_cache_revalidate on;
proxy_cache_lock on;
proxy_connect_timeout 5;
proxy_read_timeout    120;
proxy_send_timeout    120;
proxy_redirect      off;

# Use a stale cache file in the event that another request is updating the
# cached file. (Do not wait or try the next upstream server.)
proxy_cache_use_stale updating;
# Try next upstream server in the event of a failure
proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;

proxy_set_header    Host            $host;

# allows us to check the page's cache status
add_header X-Cache-Status $upstream_cache_status;

map $http_content_type $do_not_cache_ctype {
    default            0;
    "application/json" 1;
}

# The variable $do_not_cache == 1 will cause the request to bypass the cache,
# and will result in the response not being cached.
proxy_cache_bypass $do_not_cache_ctype;
proxy_no_cache     $do_not_cache_ctype;

# Addresses that are not subject to rate or connection limiting
geo $whitelisted {
    default 1;
    127.0.0.1/32 0;
}

map $whitelisted $addr_to_limit {
    1 $binary_remote_addr;
    0 "";
}

# Default connection and request zones.
# See above for definition of $addr_to_limit.
# For memory usage explanation, see:
#  http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html#limit_conn_zone
limit_conn_zone $addr_to_limit zone=defaultconnzone:{{ siteproxy_nginx_conn_zone_size }};
limit_req_zone  $addr_to_limit zone=defaultreqzone:{{ siteproxy_nginx_req_zone_size }} rate={{ siteproxy_nginx_default_req_rate }};

# Connection and rate-limiting log levels
limit_conn_log_level {{ siteproxy_nginx_limit_conn_log_level }};
limit_req_log_level {{ siteproxy_nginx_limit_req_log_level }};

{% if groups.pss is defined %}
# Primary Source Sets servers
upstream dpla_pss {
{% if all_in_one_hosts %}
    server {{ hostvars[inventory_hostname][internal_network_interface].ipv4.address }}:{{ pss_app_port }} fail_timeout=120s;  # {{ inventory_hostname }}
{% else %}
{% for h in groups.pss %}
    server {{ hostvars[h][internal_network_interface]['ipv4']['address'] }}:{{ pss_app_port }} fail_timeout=120s;  # {{ h }}
{% endfor %}
{% endif %}
}
{% endif %}

{% if groups.thumbp is defined %}
# Thumbnail proxy servers
upstream dpla_thumbp {
{% if all_in_one_hosts | default(false) %}
    server {{ hostvars[inventory_hostname][internal_network_interface].ipv4.address }}:{{ thumbp_port }} fail_timeout=120s; # {{ inventory_hostname }}
{% else %}
{% for h in groups.thumbp %}
    server {{ hostvars[h][internal_network_interface]['ipv4']['address'] }}:{{ thumbp_port }} fail_timeout=120s; # {{ h }}
{% endfor %}
{% endif %}
}
{% endif %}


server {

    listen   {{ nginx_port }} {{ listen_opts }} default;

    server_name {{ frontend_hostname }};
  
    {% if siteproxy_self_ssl %}

    # Gzip is off for SSL:
    # https://michael.lustfield.net/nginx/getting-a-perfect-ssl-labs-score
    gzip off;
    ssl_certificate /etc/ssl/certs/{{ frontend_hostname }}.pem;
    ssl_certificate_key /etc/ssl/private/{{ frontend_hostname }}.key.pem;
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains";
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    proxy_set_header X-Forwarded-Proto "https";
    proxy_set_header Host $host;
    {% endif %}

{% if default_http_scheme == 'https' and not siteproxy_self_ssl %}
    if ($http_x_forwarded_proto != 'https') {
        return 301 https://{{ frontend_hostname }}$request_uri;
    }
{% endif %}

    location / {

        # Up to 10 simultaneous page requests per IP 
        limit_conn defaultconnzone {{ siteproxy_nginx_default_max_conn }};
        # Up to 20 requests / sec for pages.
        limit_req zone=defaultreqzone burst={{ siteproxy_nginx_default_req_burst }};
    
        location /robots.txt {
            alias /srv/www/robots.txt;
        }

        {% if sitemap_host is defined %}
        rewrite ^/sitemap.xml$ http://{{ sitemap_host }}/all_item_urls.xml permanent;
        {% endif %}

    }

    location /thumb {
        # Move on to next origin server in the event of connection error or
        # timeout via proxy_next_upstream (above), but deliver stale file for
        # a 500 or 503, assuming the other server won't respond any better.
        proxy_cache_use_stale updating http_500 http_503;
        proxy_cache_valid 10d;
        expires 10d;
        add_header Cache-Control "public";
        add_header X-Cache-Status $upstream_cache_status;
        proxy_pass http://dpla_thumbp;
    }

{% if groups.pss is defined %}
    location /pssapi/ {

        rewrite /pssapi/(.*\.json) /primary-source-sets/$1 break;

        proxy_pass http://dpla_pss;
        # Up to 10 simultaneous page requests per IP
        limit_conn defaultconnzone {{ siteproxy_nginx_default_max_conn }};
        # Up to 20 requests / sec for pages.
        limit_req zone=defaultreqzone burst={{ siteproxy_nginx_default_req_burst }};
    }

    location /primary-source-sets/ {
        proxy_pass http://dpla_pss;
    }
{% endif %}

    location /wiki {
        return 301 http://web.archive.org/web/20160316200044/http://dp.la/wiki/Main_Page;
     }

    location /503.html {
        root /var/www;
    }

}

server {
    listen   {{ nginx_port }} {{ listen_opts }};
    server_name www.{{ frontend_hostname }};
    return 301 {{ default_http_scheme }}://{{ frontend_hostname }}$request_uri;
}

{% if siteproxy_self_ssl %}
server {
    listen 80;
    server_name {{ frontend_hostname }};
    return 301 https://{{ frontend_hostname }}$request_uri;
}
{% endif %}
